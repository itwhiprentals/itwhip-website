// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// USER & AUTHENTICATION MODELS
// ============================================================================

model User {
  id    String   @id @default(cuid())
  email String?  @unique
  name  String?
  role  UserRole @default(ANONYMOUS)

  // Authentication
  passwordHash     String?
  emailVerified    Boolean @default(false)
  phoneVerified    Boolean @default(false)
  isActive         Boolean @default(true)
  twoFactorEnabled Boolean @default(false)

  // 🆕 PASSWORD RESET FIELDS
  resetToken              String?   @unique
  resetTokenExpiry        DateTime?
  resetTokenUsed          Boolean   @default(false)
  lastPasswordReset       DateTime?
  passwordResetAttempts   Int       @default(0)
  passwordResetLastAttempt DateTime?

  // Profile
  jobTitle String?
  phone    String?
  avatar   String?

  // Relationships
  hotelId String?
  hotel   Hotel?  @relation(fields: [hotelId], references: [id])

  // Rental relationships
  rentalHost      RentalHost?
  rentalBookings  RentalBooking[]  @relation("RenterBookings")
  reviewerProfile ReviewerProfile?

  // Security
  sessions      Session[]
  apiKeys       ApiKey[]
  loginAttempts LoginAttempt[]
  auditLogs     AuditLog[]
  activityLogs  ActivityLog[]

  // Notifications
  notificationDismissals NotificationDismissal[]

  // Payment methods
  paymentMethods PaymentMethod[] @relation("UserPaymentMethods")

  // Timestamps
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  lastActive DateTime?

  @@index([email])
  @@index([hotelId])
  @@index([role])
  @@index([resetToken])
}

model NotificationDismissal {
  id               String    @id @default(cuid())
  userId           String
  notificationType String // PAYMENT_REQUIRED, LICENSE_REQUIRED, INSURANCE_REQUIRED, EMERGENCY_CONTACT, PROFILE_INCOMPLETE, TWO_FACTOR_DISABLED
  dismissedAt      DateTime  @default(now())
  dismissCount     Int       @default(1)
  completedAt      DateTime? // When the action was actually completed

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, notificationType])
  @@index([userId])
  @@index([dismissedAt])
}

model Session {
  id     String  @id @default(cuid())
  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Session data
  token        String  @unique
  refreshToken String? @unique
  tokenFamily  String?

  // Device info
  ipAddress   String
  userAgent   String
  deviceId    String?
  fingerprint String?

  // Validity
  expiresAt DateTime
  revokedAt DateTime?

  createdAt    DateTime @default(now())
  lastActivity DateTime @default(now())

  @@index([token])
  @@index([refreshToken])
  @@index([userId])
}

model ApiKey {
  id   String @id @default(cuid())
  key  String @unique
  name String

  // Owner
  userId  String
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  hotelId String?
  hotel   Hotel?  @relation(fields: [hotelId], references: [id])

  // Permissions - JSON
  permissions String
  tier        CertificationTier?

  // Rate limiting
  rateLimit  Int    @default(1000)
  rateWindow String @default("hour")

  // Usage tracking
  lastUsed   DateTime?
  usageCount Int       @default(0)

  // Status
  active    Boolean   @default(true)
  expiresAt DateTime?

  createdAt DateTime @default(now())

  @@index([key])
  @@index([hotelId])
}

// ============================================================================
// HOTEL MODELS
// ============================================================================

model Hotel {
  id      String @id @default(cuid())
  gdsCode String @unique
  name    String

  // Property details
  type  PropertyType
  size  HotelSize
  rooms Int
  stars Int?
  chain String?

  // Location
  address   String
  city      String
  state     String
  zip       String
  country   String
  latitude  Float?
  longitude Float?

  // Platform status
  claimed   Boolean   @default(false)
  claimedBy String?
  claimedAt DateTime?

  certified           Boolean            @default(false)
  certificationTier   CertificationTier?
  certifiedAt         DateTime?
  certificationExpiry DateTime?

  active Boolean @default(true)

  // Relationships
  users    User[]
  bookings Booking[]
  rides    Ride[]
  revenue  Revenue[]
  metrics  HotelMetrics[]
  apiKeys  ApiKey[]

  // Integration
  pmsType        String?
  pmsConnected   Boolean @default(false)
  channelManager String?

  // Metadata - JSON
  amenities String?
  images    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([gdsCode])
  @@index([city, state])
  @@index([certified])
}

model HotelMetrics {
  id      String @id @default(cuid())
  hotelId String
  hotel   Hotel  @relation(fields: [hotelId], references: [id], onDelete: Cascade)

  // Period
  period    MetricPeriod
  startDate DateTime
  endDate   DateTime

  // Occupancy
  occupancyRate  Float
  roomsOccupied  Int
  roomsAvailable Int

  // Revenue
  roomRevenue  Float
  rideRevenue  Float
  totalRevenue Float

  // Rides
  totalRides       Int
  completedRides   Int
  cancelledRides   Int
  averageRideValue Float

  // Bookings
  totalBookings    Int
  directBookings   Int
  otaBookings      Int
  averageStayDays  Float
  cancellationRate Float

  // Ratings
  guestRating Float?
  rideRating  Float?

  calculatedAt DateTime @default(now())

  @@unique([hotelId, period, startDate])
  @@index([hotelId])
}

// ============================================================================
// BOOKING MODELS
// ============================================================================

model Booking {
  id                 String @id @default(cuid())
  confirmationNumber String @unique

  // Hotel
  hotelId String
  hotel   Hotel  @relation(fields: [hotelId], references: [id])

  // Guest
  guestId String
  guest   Guest  @relation(fields: [guestId], references: [id])

  // Dates
  checkIn  DateTime
  checkOut DateTime
  nights   Int

  // Room
  roomType   String
  roomNumber String?
  roomRate   Float

  // Source & Status
  source BookingSource
  status BookingStatus

  // Financial
  roomCharges Float
  taxes       Float
  fees        Float
  totalAmount Float
  currency    String @default("USD")

  // Transportation
  airportPickup  Boolean @default(false)
  airportDropoff Boolean @default(false)
  ridesIncluded  Int     @default(0)
  ridesUsed      Int     @default(0)

  // Relationships
  rides Ride[]

  // Management
  canModify Boolean @default(true)
  canCancel Boolean @default(true)
  notes     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([hotelId])
  @@index([guestId])
  @@index([confirmationNumber])
  @@index([status])
}

model Guest {
  id        String  @id @default(cuid())
  firstName String
  lastName  String
  email     String?
  phone     String?
  country   String?

  // Preferences (JSON)
  preferences String?

  // History
  totalStays Int       @default(0)
  totalSpent Float     @default(0)
  lastStay   DateTime?

  // Relationships
  bookings Booking[]
  rides    Ride[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
}

// ============================================================================
// RIDE MODELS
// ============================================================================

model Ride {
  id String @id @default(cuid())

  // Associations
  hotelId   String
  hotel     Hotel    @relation(fields: [hotelId], references: [id])
  bookingId String?
  booking   Booking? @relation(fields: [bookingId], references: [id])
  guestId   String?
  guest     Guest?   @relation(fields: [guestId], references: [id])
  driverId  String?
  driver    Driver?  @relation(fields: [driverId], references: [id])

  // Locations
  pickupAddress String
  pickupLat     Float?
  pickupLng     Float?
  pickupTime    DateTime
  pickupType    String

  dropoffAddress String
  dropoffLat     Float?
  dropoffLng     Float?
  dropoffTime    DateTime?
  dropoffType    String

  // Status
  status  RideStatus
  isGhost Boolean    @default(false)

  // Pricing
  basePrice       Float
  distancePrice   Float
  timePrice       Float
  surgeMultiplier Float  @default(1.0)
  totalPrice      Float
  currency        String @default("USD")

  // Commission
  hotelCommission Float
  driverEarnings  Float
  platformFee     Float @default(0)

  // Tracking
  trackingUrl String?
  distance    Float?
  duration    Int?

  // Ghost ride data (for FOMO)
  ghostData String?

  requestedAt DateTime  @default(now())
  completedAt DateTime?

  @@index([hotelId])
  @@index([status])
  @@index([isGhost])
}

model Driver {
  id    String  @id @default(cuid())
  name  String
  email String  @unique
  phone String
  photo String?

  // Ratings
  rating     Float @default(5.0)
  totalTrips Int   @default(0)

  // Vehicle
  vehicleMake  String
  vehicleModel String
  vehicleYear  Int
  vehicleColor String
  vehiclePlate String
  vehicleType  String

  // Status
  available Boolean @default(true)
  verified  Boolean @default(false)
  active    Boolean @default(true)

  // Location
  lastLat    Float?
  lastLng    Float?
  lastUpdate DateTime?

  // Relationships
  rides Ride[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([available])
}

// ============================================================================
// CAR RENTAL MODELS - WITH COMPLETE HOST LIFECYCLE MANAGEMENT
// ============================================================================

model RentalHost {
  id           String  @id @default(cuid())
  userId       String? @unique
  email        String  @unique
  name         String
  phone        String
  profilePhoto String?
  bio          String?

  // Verification
  isVerified        Boolean   @default(false)
  verifiedAt        DateTime?
  verificationLevel String?

  // Performance metrics
  responseTime   Int?
  responseRate   Float?
  acceptanceRate Float?
  totalTrips     Int    @default(0)
  rating         Float  @default(5.0)

  // Location
  city    String
  state   String
  zipCode String?

  // Status
  active   Boolean  @default(true)
  joinedAt DateTime @default(now())

  // ===== HOST MANAGEMENT FIELDS =====

  // Access control
  hostType        String  @default("PENDING")
  approvalStatus  String  @default("PENDING")
  dashboardAccess Boolean @default(false)

  // Graduated permissions
  canViewBookings  Boolean @default(false)
  canEditCalendar  Boolean @default(false)
  canSetPricing    Boolean @default(false)
  canMessageGuests Boolean @default(false)
  canWithdrawFunds Boolean @default(false)

  // Control boundaries
  minDailyRate   Float?
  maxDailyRate   Float?
  commissionRate Float  @default(0.25)

  // Approval tracking
  approvedBy      String?
  approvedAt      DateTime?
  rejectedReason  String?
  suspendedAt     DateTime?
  suspendedReason String?

  // Document uploads (URLs to Cloudinary)
  governmentIdUrl   String?
  driversLicenseUrl String?
  insuranceDocUrl   String?
  documentsVerified Boolean @default(false)

  // Additional host settings
  autoApproveBookings Boolean @default(false)
  requireDeposit      Boolean @default(true)
  depositAmount       Float   @default(500)

  // ===== NEW LIFECYCLE TRACKING FIELDS =====

  // Document status tracking
  documentStatuses      Json?
  pendingActions        String[] @default([])
  backgroundCheckStatus String?
  restrictionReasons    String[] @default([])

  // Notification tracking
  lastNotificationSent   DateTime?
  documentsRequestedAt   DateTime?
  documentsResubmittedAt DateTime?

  // ===== OLD FIELDS FROM DATABASE (KEEP FOR COMPATIBILITY) =====

  bankAccountInfo     String?
  defaultPayoutMethod String?
  payoutFrequency     String? @default("weekly")
  protectionPlan      String? @default("BASIC")
  protectionPlanFee   Float?
  stripeAccountId     String?
  totalPayoutAmount   Float?  @default(0)
  totalPayoutCount    Int?    @default(0)

  // ===== STRIPE CONNECT & PAYOUT FIELDS =====

  // Stripe Connect Account (FOR RECEIVING PAYOUTS)
  stripeConnectAccountId  String?   @unique
  stripeAccountStatus     String?   @default("pending")
  stripePayoutsEnabled    Boolean   @default(false)
  stripeChargesEnabled    Boolean   @default(false)
  stripeDetailsSubmitted  Boolean   @default(false)
  stripeOnboardingLink    String?
  stripeTosAcceptanceDate DateTime?
  stripeTosAcceptanceIp   String?

  // ===== NEW DUAL STRIPE FIELDS - FOR CHARGING HOSTS =====

  // Stripe Customer Account (FOR CHARGING HOSTS)
  stripeCustomerId           String? @unique
  defaultPaymentMethodOnFile String?

  // Subscription Management (Fleet Manager tier)
  subscriptionTier           String    @default("FREE")
  subscriptionStatus         String    @default("ACTIVE")
  subscriptionStartDate      DateTime?
  subscriptionEndDate        DateTime?
  monthlySubscriptionFee     Float     @default(0)
  lastSubscriptionChargeDate DateTime?
  nextSubscriptionChargeDate DateTime?

  // Balance Holds & Negative Balances
  holdBalance     Float @default(0)
  negativeBalance Float @default(0)

  // Platform Charging History
  totalChargedAmount Float     @default(0)
  lastChargedDate    DateTime?
  lastChargeReason   String?

  // ===== END NEW DUAL STRIPE FIELDS =====

  // Bank Account Information (Tokenized via Stripe)
  bankAccountLast4 String?
  bankAccountName  String?
  bankName         String?
  bankAccountType  String?   @default("checking")
  bankAccountToken String?
  bankVerified     Boolean   @default(false)
  bankVerifiedDate DateTime?

  // Debit Card Information (for instant payouts via Stripe)
  debitCardLast4    String?
  debitCardBrand    String?
  debitCardExpMonth Int?
  debitCardExpYear  Int?
  debitCardToken    String?
  debitCardVerified Boolean @default(false)

  // Payout Method Management
  payoutMethods         Json?
  defaultPayoutMethodId String?

  // Payout Settings
  payoutSchedule       String  @default("weekly")
  payoutScheduleDay    String? @default("Friday")
  minimumPayoutAmount  Float   @default(50.00)
  instantPayoutEnabled Boolean @default(false)

  // Tax Information (Encrypted)
  taxIdProvided   Boolean   @default(false)
  taxIdType       String?
  businessName    String?
  businessType    String?
  w9Submitted     Boolean   @default(false)
  w9SubmittedDate DateTime?

  // Payout History & Balance
  currentBalance      Float     @default(0)
  pendingBalance      Float     @default(0)
  totalEarnings       Float     @default(0)
  lastPayoutDate      DateTime?
  lastPayoutAmount    Float?
  nextScheduledPayout DateTime?
  totalPayoutsCount   Int       @default(0)
  totalPayoutsAmount  Float     @default(0)

  // Payout Restrictions & Holds
  payoutsEnabled        Boolean   @default(false)
  payoutsDisabledReason String?
  holdFundsUntil        DateTime?
  holdReason            String?

  // Fee Structure
  platformFeeRate      Float @default(0.25)
  instantPayoutFeeRate Float @default(0.015)

  // ===== END OF PAYOUT FIELDS =====

  // ===== INSURANCE FIELDS =====

  // Platform Insurance Assignment (provider-agnostic)
  insuranceProviderId   String?
  insuranceProvider     InsuranceProvider? @relation("HostInsurance", fields: [insuranceProviderId], references: [id])
  insurancePolicyNumber String?
  insuranceActive       Boolean            @default(false)
  insuranceAssignedAt   DateTime?
  insuranceAssignedBy   String?

  // Host's Own Insurance (LEGACY - Deprecated, use new tier fields)
  hostInsuranceProvider      String?
  hostPolicyNumber           String?
  hostInsuranceExpires       DateTime?
  hostInsuranceStatus        HostInsuranceStatus @default(ACTIVE)
  hostInsuranceDeactivatedAt DateTime?
  deactivationReason         String?             @db.Text

  // Insurance History & Audit Trail
  insuranceHistory Json?

  // ===== END INSURANCE FIELDS =====

  // ===== NEW TIERED INSURANCE & EARNINGS FIELDS =====

  // Migration tracking
  usingLegacyInsurance Boolean @default(true)

  // P2P Insurance (Tier 2 - Standard: 75% earnings)
  p2pInsuranceStatus   InsuranceStatus?
  p2pInsuranceProvider String?
  p2pPolicyNumber      String?
  p2pInsuranceExpires  DateTime?
  p2pInsuranceActive   Boolean          @default(false)

  // Commercial Insurance (Tier 3 - Premium: 90% earnings)
  commercialInsuranceStatus   InsuranceStatus?
  commercialInsuranceProvider String?
  commercialPolicyNumber      String?
  commercialInsuranceExpires  DateTime?
  commercialInsuranceActive   Boolean          @default(false)

  // Active Earnings Tier (determines platform fee)
  earningsTier EarningsTier @default(BASIC)

  // Tier Change Tracking
  lastTierChange   DateTime?
  tierChangeReason String?
  tierChangeBy     String?

  // ===== END TIERED INSURANCE & EARNINGS FIELDS =====

  // Relations
  user                  User?                @relation(fields: [userId], references: [id])
  cars                  RentalCar[]
  bookings              RentalBooking[]
  reviews               RentalReview[]
  payouts               RentalPayout[]
  hostPayouts           HostPayout[]
  backgroundChecks      BackgroundCheck[]
  hostNotifications     HostNotification[]
  documentStatusRecords HostDocumentStatus[]
  paymentMethods        PaymentMethod[]      @relation("HostPaymentMethods")
  hostCharges           HostCharge[]
  claims                Claim[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([city, state])
  @@index([hostType])
  @@index([approvalStatus])
  @@index([stripeConnectAccountId])
  @@index([stripeCustomerId])
  @@index([payoutsEnabled])
  @@index([stripeAccountId])
  @@index([hostInsuranceStatus])
  @@index([insuranceProviderId])
  @@index([earningsTier])
  @@index([p2pInsuranceStatus])
  @@index([commercialInsuranceStatus])
  @@index([usingLegacyInsurance])
}

// ============================================================================
// HOST CHARGE MODEL (NEW - TRACK PLATFORM CHARGING HOSTS)
// ============================================================================

model HostCharge {
  id     String     @id @default(cuid())
  hostId String
  host   RentalHost @relation(fields: [hostId], references: [id], onDelete: Cascade)

  // Charge details
  amount     Float
  chargeType String
  reason     String @db.Text

  // Admin tracking
  chargedBy        String
  stripeChargeId   String?
  stripeCustomerId String?

  // Status tracking
  status        String
  failureReason String? @db.Text

  // Payment method used
  paymentMethodUsed String?

  // Metadata
  metadata Json?
  notes    String? @db.Text

  // Related entities
  relatedBookingId String?
  relatedClaimId   String?

  createdAt   DateTime  @default(now())
  processedAt DateTime?
  refundedAt  DateTime?

  @@index([hostId])
  @@index([status])
  @@index([chargeType])
  @@index([createdAt])
  @@map("host_charges")
}

// ============================================================================
// PAYMENT METHOD MODEL (UPDATED WITH CARD FIELDS)
// ============================================================================

model PaymentMethod {
  id     String      @id @default(cuid())
  hostId String?
  host   RentalHost? @relation("HostPaymentMethods", fields: [hostId], references: [id], onDelete: Cascade)

  // User relation for guest payment methods
  userId String?
  user   User?   @relation("UserPaymentMethods", fields: [userId], references: [id], onDelete: Cascade)

  // Method details
  type           String
  stripeMethodId String @unique

  // Display information
  last4       String
  brand       String?
  accountType String?

  // Card-specific fields
  expiryMonth Int?
  expiryYear  Int?
  holderName  String?

  // Status
  status     String?   @default("active")
  isDefault  Boolean   @default(false)
  isVerified Boolean   @default(false)
  verifiedAt DateTime?

  // Metadata
  nickname String?
  metadata Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([hostId])
  @@index([userId])
  @@index([stripeMethodId])
  @@index([isDefault])
}

// ============================================================================
// NEW HOST LIFECYCLE MODELS FOR PHASE 1
// ============================================================================

model BackgroundCheck {
  id     String     @id @default(cuid())
  hostId String
  host   RentalHost @relation(fields: [hostId], references: [id])

  // Check types and statuses
  checkType String
  status    BackgroundCheckStatus @default(PENDING)
  provider  String?

  // Request tracking
  requestedAt DateTime  @default(now())
  completedAt DateTime?
  expiresAt   DateTime?

  // Results
  passed    Boolean?
  score     Int?
  details   Json?
  reportUrl String?

  // Failure/Issue tracking
  failureReason String?
  issues        Json?

  // Manual override
  manuallyReviewed Boolean   @default(false)
  reviewedBy       String?
  reviewedAt       DateTime?
  overrideReason   String?

  // Retry tracking
  retryCount  Int       @default(0)
  nextRetryAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([hostId, checkType])
  @@index([hostId])
  @@index([status])
  @@index([checkType])
  @@index([expiresAt])
}

model HostNotification {
  id     String     @id @default(cuid())
  hostId String
  host   RentalHost @relation(fields: [hostId], references: [id])

  // Notification details
  type     String
  category String
  subject  String
  message  String @db.Text

  // Status tracking
  status      NotificationStatus @default(PENDING)
  sentAt      DateTime?
  readAt      DateTime?
  respondedAt DateTime?

  // Delivery tracking
  emailSent  Boolean @default(false)
  smsSent    Boolean @default(false)
  pushSent   Boolean @default(false)
  inAppShown Boolean @default(false)

  // Response tracking
  responseRequired Boolean   @default(false)
  responseDeadline DateTime?
  responseReceived String?

  // Action tracking
  actionRequired  String?
  actionUrl       String?
  actionLabel     String?
  actionCompleted Boolean @default(false)

  // Related entities
  relatedDocumentType String?
  relatedCheckType    String?

  // Retry/Reminder tracking
  reminderCount  Int       @default(0)
  lastReminderAt DateTime?
  nextReminderAt DateTime?

  // Priority
  priority String @default("normal")

  // Expiry
  expiresAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([hostId])
  @@index([type])
  @@index([status])
  @@index([priority])
  @@index([responseDeadline])
}

model HostDocumentStatus {
  id     String     @id @default(cuid())
  hostId String
  host   RentalHost @relation(fields: [hostId], references: [id])

  // Document identification
  documentType String
  documentUrl  String?

  // Status tracking
  status     DocumentStatus @default(NOT_UPLOADED)
  uploadedAt DateTime?

  // Review tracking
  reviewStatus DocumentReviewStatus @default(PENDING)
  reviewedBy   String?
  reviewedAt   DateTime?

  // Quality checks
  isReadable Boolean?
  isExpired  Boolean?
  expiryDate DateTime?

  // Verification details
  verificationMethod String?
  verificationScore  Int?

  // Issues and feedback
  issues          Json?
  feedback        String?
  rejectionReason String?

  // Request tracking
  requestedAt    DateTime?
  remindersSent  Int       @default(0)
  lastReminderAt DateTime?

  // Resubmission tracking
  resubmissionCount Int       @default(0)
  lastResubmittedAt DateTime?

  // Auto-expiry handling
  expiryWarningAt DateTime?
  autoSuspendAt   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([hostId, documentType])
  @@index([hostId])
  @@index([status])
  @@index([reviewStatus])
  @@index([expiryDate])
}

// ============================================================================
// INSURANCE PROVIDER MODEL (NEW)
// ============================================================================

model InsuranceProvider {
  id   String                @id @default(cuid())
  name String
  type InsuranceProviderType

  // Status
  isActive  Boolean @default(true)
  isPrimary Boolean @default(false)

  // Coverage Configuration (JSON)
  coverageTiers Json
  pricingRules  Json

  // API Integration (for providers like Tint)
  apiKey                 String? @db.Text
  apiEndpoint            String?
  webhookUrl             String?
  apiEndpointPlaceholder String?

  // Business Terms
  revenueShare Float @default(0.30)

  // Contract Details
  contractStart     DateTime?
  contractEnd       DateTime?
  contractTerms     String?   @db.Text
  contractStartDate DateTime?
  contractEndDate   DateTime?

  // Vehicle Restrictions
  vehicleValueMin Float?
  vehicleValueMax Float?
  excludedMakes   String[] @default([])
  excludedModels  String[] @default([])

  // Provider Details
  coverageNotes String? @db.Text
  contactEmail  String?
  contactPhone  String?

  // Relations
  assignedHosts    RentalHost[]               @relation("HostInsurance")
  policies         InsurancePolicy[]
  rateHistory      InsuranceRateHistory[]
  vehicleOverrides VehicleInsuranceOverride[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isActive])
  @@index([isPrimary])
}

// ============================================================================
// INSURANCE POLICY MODEL (NEW)
// ============================================================================

model InsurancePolicy {
  id         String @id @default(cuid())
  bookingId  String @unique
  providerId String

  // Coverage Tier
  tier InsuranceTier

  // Coverage Amounts
  liabilityCoverage Float @default(750000)
  collisionCoverage Float
  deductible        Float

  // Pricing
  dailyPremium    Float
  totalPremium    Float
  platformRevenue Float

  // Special Handling
  increasedDeposit Float?

  // Status
  status       PolicyStatus
  policyNumber String?

  // Policy Period
  effectiveDate DateTime
  expiryDate    DateTime

  // Relations
  provider InsuranceProvider @relation(fields: [providerId], references: [id])
  booking  RentalBooking     @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  claims   Claim[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([bookingId])
  @@index([providerId])
  @@index([status])
}

// ============================================================================
// CLAIM MODEL (NEW)
// ============================================================================

model Claim {
  id        String @id @default(cuid())
  policyId  String
  bookingId String
  hostId    String

  // Claim Type & Incident
  type         ClaimType
  reportedBy   String
  description  String    @db.Text
  incidentDate DateTime
  damagePhotos Json

  // Assessment
  estimatedCost Float

  // Review Process
  status      ClaimStatus
  reviewedBy  String?
  reviewedAt  DateTime?
  reviewNotes String?     @db.Text

  // Approval & Payment
  approvedAmount Float?
  deductible     Float  @default(500)

  // Payout Tracking
  payoutId   String?
  paidToHost DateTime?
  paidAmount Float?

  // Recovery from Guest
  platformAdvanceAmount Float?
  recoveredFromGuest    Float?
  recoveryStatus        RecoveryStatus?

  // Audit Trail
  overrideHistory Json?

  // Fault Determination
  guestAtFault    Boolean @default(false)
  faultPercentage Int?

  // Relations
  policy  InsurancePolicy @relation(fields: [policyId], references: [id])
  booking RentalBooking   @relation(fields: [bookingId], references: [id])
  host    RentalHost      @relation(fields: [hostId], references: [id])

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  resolvedAt DateTime?

  @@index([hostId])
  @@index([bookingId])
  @@index([policyId])
  @@index([status])
  @@index([type])
  @@index([payoutId])
}

// ============================================================================
// INSURANCE RATE HISTORY MODEL (NEW)
// ============================================================================

model InsuranceRateHistory {
  id            String   @id @default(cuid())
  providerId    String
  tier          String
  vehicleClass  String
  oldRate       Float
  newRate       Float
  change        Float
  changePercent Float?
  changeType    String
  effectiveDate DateTime
  changedBy     String
  reason        String?

  provider InsuranceProvider @relation(fields: [providerId], references: [id])

  createdAt DateTime @default(now())

  @@index([providerId])
  @@index([effectiveDate])
  @@index([tier])
  @@index([vehicleClass])
}

// ============================================================================
// VEHICLE INSURANCE OVERRIDE MODEL (NEW)
// ============================================================================

model VehicleInsuranceOverride {
  id           String @id @default(cuid())
  carId        String
  providerId   String
  reason       String
  overriddenBy String

  car      RentalCar         @relation(fields: [carId], references: [id])
  provider InsuranceProvider @relation(fields: [providerId], references: [id])

  createdAt DateTime @default(now())

  @@unique([carId, providerId])
  @@index([carId])
  @@index([providerId])
}

// ============================================================================
// INSURANCE NOTIFICATION MODEL (NEW)
// ============================================================================

model InsuranceNotification {
  id      String   @id @default(cuid())
  type    String
  sentTo  String[]
  subject String
  message String   @db.Text
  sentBy  String

  sentAt DateTime @default(now())

  @@index([type])
  @@index([sentAt])
}

// ============================================================================
// RENTAL CAR MODELS
// ============================================================================

model RentalCar {
  id         String  @id @default(cuid())
  hostId     String
  source     String  @default("p2p")
  externalId String?

  // Car Details
  make         String
  model        String
  year         Int
  trim         String?
  color        String
  licensePlate String?
  vin          String?

  // Specifications
  carType        String
  seats          Int
  doors          Int
  transmission   String
  fuelType       String
  mpgCity        Int?
  mpgHighway     Int?
  currentMileage Int?

  // Pricing (daily rates)
  dailyRate   Float
  weeklyRate  Float?
  monthlyRate Float?

  // UPDATED DELIVERY FEES - Individual fees per type
  deliveryFee Float @default(35)
  airportFee  Float @default(0)
  hotelFee    Float @default(35)
  homeFee     Float @default(50)

  // Discounts
  weeklyDiscount  Float? @default(0.15)
  monthlyDiscount Float? @default(0.30)

  // Features (JSON array)
  features String

  // Location
  address   String
  city      String
  state     String
  zipCode   String
  latitude  Float?
  longitude Float?

  // Pickup/Delivery options
  airportPickup Boolean @default(false)
  hotelDelivery Boolean @default(true)
  homeDelivery  Boolean @default(false)

  // NEW DELIVERY SETTINGS
  deliveryRadius       Int     @default(10)
  freeDeliveryRadius   Int     @default(0)
  deliveryInstructions String?

  // Availability settings
  isActive        Boolean @default(true)
  instantBook     Boolean @default(true)
  advanceNotice   Int     @default(2)
  minTripDuration Int     @default(1)
  maxTripDuration Int     @default(30)

  // NEW TRIP SETTINGS
  bufferTime         Int    @default(2)
  cancellationPolicy String @default("moderate")
  checkInTime        String @default("10:00")
  checkOutTime       String @default("10:00")

  // NEW MILEAGE SETTINGS
  mileageDaily      Int   @default(200)
  mileageWeekly     Int   @default(1000)
  mileageMonthly    Int   @default(3000)
  mileageOverageFee Float @default(3.0)

  // Rules & Guidelines (JSON)
  rules String?

  // Insurance
  insuranceIncluded Boolean @default(false)
  insuranceDaily    Float   @default(25)

  // Stats
  totalTrips Int   @default(0)
  rating     Float @default(5.0)

  // Relations
  host               RentalHost                 @relation(fields: [hostId], references: [id])
  photos             RentalCarPhoto[]
  bookings           RentalBooking[]
  availability       RentalAvailability[]
  reviews            RentalReview[]
  insuranceOverrides VehicleInsuranceOverride[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([hostId])
  @@index([city, state])
  @@index([carType])
  @@index([isActive, instantBook])
}

model RentalCarPhoto {
  id      String  @id @default(cuid())
  carId   String
  url     String
  caption String?
  isHero  Boolean @default(false)
  order   Int     @default(0)

  car RentalCar @relation(fields: [carId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([carId])
}

model RentalAvailability {
  id          String   @id @default(cuid())
  carId       String
  date        DateTime @db.Date
  isAvailable Boolean  @default(true)
  customPrice Float?
  note        String?

  car RentalCar @relation(fields: [carId], references: [id], onDelete: Cascade)

  @@unique([carId, date])
  @@index([carId, date, isAvailable])
}

model RentalBooking {
  id          String @id @default(cuid())
  bookingCode String @unique @default(cuid())

  // Parties
  carId    String
  hostId   String
  renterId String?

  // Guest fields for non-authenticated bookings
  guestEmail String?
  guestPhone String?
  guestName  String?

  // Link to reviewer profile for guest dashboard
  reviewerProfileId String?
  reviewerProfile   ReviewerProfile? @relation(fields: [reviewerProfileId], references: [id])

  // UPDATED VERIFICATION STATUS ENUM
  verificationStatus   VerificationStatus @default(PENDING)
  verificationDeadline DateTime?
  verificationNotes    String?
  reviewedBy           String?
  reviewedAt           DateTime?
  documentsSubmittedAt DateTime?

  // Associated hotel booking (if any)
  hotelBookingId String?

  // Dates
  startDate DateTime
  endDate   DateTime
  startTime String
  endTime   String

  // Pickup/Delivery
  pickupLocation  String
  pickupType      String
  deliveryAddress String?
  returnLocation  String?

  // Pricing
  dailyRate     Float
  numberOfDays  Int
  subtotal      Float
  deliveryFee   Float @default(0)
  insuranceFee  Float @default(0)
  serviceFee    Float
  taxes         Float
  totalAmount   Float
  depositAmount Float @default(500)

  // ===== NEW INSURANCE DEPOSIT FIELDS =====
  securityDeposit     Float
  depositHeld         Float
  depositRefunded     Float?
  depositRefundedAt   DateTime?
  depositUsedForClaim Float?
  // ===== END INSURANCE DEPOSIT FIELDS =====

  // CHARGE TRACKING FIELDS - FIXED WITH NEW FIELD
  pendingChargesAmount Decimal?  @db.Decimal(10, 2)
  chargesProcessedAt   DateTime?
  finalReceiptSentAt   DateTime?
  chargesNotes         String?   @db.Text

  // Charge management fields - INCLUDING THE MISSING ONE
  chargesWaivedAmount   Decimal? @db.Decimal(10, 2)
  chargesWaivedReason   String?
  chargesAdjustedAmount Decimal? @db.Decimal(10, 2)

  // Status
  status          RentalBookingStatus @default(PENDING)
  paymentStatus   PaymentStatus       @default(PENDING)
  paymentIntentId String?

  // STRIPE PAYMENT FIELDS
  stripeCustomerId      String?
  stripePaymentMethodId String?
  stripeChargeId        String?
  stripeSetupIntentId   String?
  paymentFailureReason  String?
  paymentProcessedAt    DateTime?

  // Cancellation tracking
  cancellationReason String?
  cancelledBy        CancelledBy?
  cancelledAt        DateTime?

  // Verification
  licenseVerified   Boolean   @default(false)
  licenseNumber     String?
  licenseState      String?
  licenseExpiry     DateTime?
  licensePhotoUrl   String?
  insurancePhotoUrl String?
  selfieVerified    Boolean   @default(false)
  selfiePhotoUrl    String?
  dateOfBirth       DateTime?

  // FRAUD PREVENTION FIELDS
  bookingIpAddress  String?
  bookingUserAgent  String?
  bookingCountry    String?
  bookingCity       String?
  deviceFingerprint String?
  sessionId         String?
  sessionStartedAt  DateTime?
  sessionDuration   Int?

  // Risk Assessment
  riskScore        Int?    @default(0)
  riskFlags        String?
  riskNotes        String?
  fraudulent       Boolean @default(false)
  flaggedForReview Boolean @default(false)

  // Behavioral Tracking
  formCompletionTime  Int?
  fieldChangeCount    Int?
  copyPasteUsed       Boolean @default(false)
  mouseEventsRecorded Boolean @default(false)

  // Email/Phone Verification
  emailVerified Boolean @default(false)
  emailDomain   String?
  phoneVerified Boolean @default(false)
  phoneCarrier  String?
  phoneType     String?

  // TRIP TRACKING FIELDS
  tripStatus             TripStatus @default(NOT_STARTED)
  pickupWindowStart      DateTime?
  pickupWindowEnd        DateTime?
  pickupLatitude         Float?
  pickupLongitude        Float?
  returnLatitude         Float?
  returnLongitude        Float?
  pickupLocationVerified Boolean    @default(false)
  partnerLocationId      String?

  tripStartedAt DateTime?
  tripEndedAt   DateTime?

  // Check-in/out
  actualStartTime DateTime?
  actualEndTime   DateTime?
  startMileage    Int?
  endMileage      Int?
  fuelLevelStart  String?
  fuelLevelEnd    String?

  // INSPECTION FIELDS
  inspectionPhotosStart String?
  inspectionPhotosEnd   String?
  damageReported        Boolean @default(false)
  damageDescription     String? @db.Text
  damagePhotos          String?

  // Extras (JSON)
  extras String?
  notes  String?

  // Relations
  car               RentalCar          @relation(fields: [carId], references: [id])
  host              RentalHost         @relation(fields: [hostId], references: [id])
  renter            User?              @relation("RenterBookings", fields: [renterId], references: [id])
  messages          RentalMessage[]
  review            RentalReview?
  guestAccessTokens GuestAccessToken[]
  hostPayouts       HostPayout[]
  disputes          RentalDispute[]
  bookingSession    BookingSession?
  fraudIndicators   FraudIndicator[]
  inspectionPhotos  InspectionPhoto[]
  tripCharges       TripCharge[]
  chargeAdjustments ChargeAdjustment[]
  rentalPayouts     RentalPayout[]
  insurancePolicy   InsurancePolicy?
  claims            Claim[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([renterId])
  @@index([carId])
  @@index([hostId])
  @@index([status])
  @@index([startDate, endDate])
  @@index([guestEmail])
  @@index([riskScore])
  @@index([fraudulent])
  @@index([bookingIpAddress])
  @@index([deviceFingerprint])
  @@index([stripeCustomerId])
  @@index([paymentStatus])
  @@index([tripStatus])
  @@index([verificationStatus])
  @@index([reviewerProfileId])
}

// ============================================================================
// REVIEW SYSTEM MODELS - ✅ UPDATED WITH ENHANCED GUEST PROFILE & INSURANCE & PASSWORD RESET
// ============================================================================

model ReviewerProfile {
  id              String   @id @default(cuid())
  email           String?  @unique
  name            String
  profilePhotoUrl String?
  memberSince     DateTime @default(now())
  city            String
  state           String   @default("AZ")
  zipCode         String?

  // Link to User account for login
  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  // Personal Information
  phoneNumber String?
  bio         String?   @db.Text
  dateOfBirth DateTime?

  // Address
  address String?

  // Emergency Contact
  emergencyContactName     String?
  emergencyContactPhone    String?
  emergencyContactRelation String?

  // Identity Documents
  governmentIdUrl    String?
  governmentIdType   GovernmentIdType?
  driversLicenseUrl  String?
  selfieUrl          String?
  documentsVerified  Boolean           @default(false)
  documentVerifiedAt DateTime?
  documentVerifiedBy String?

  // ============================================================================
  // 🆕 GUEST INSURANCE FIELDS - CURRENT ACTIVE INSURANCE
  // ============================================================================
  
  // Basic Insurance Info
  insuranceProvider       String?
  policyNumber            String?
  expiryDate              DateTime?
  hasRideshare            Boolean   @default(false)
  coverageType            String?   // "State Minimum (25/50/25)", "Basic (50/100/50)", etc.
  customCoverage          String?   // If user selects "Custom/Other"
  
  // Insurance Card Images
  insuranceCardFrontUrl   String?
  insuranceCardBackUrl    String?
  
  // Insurance Verification
  insuranceVerified       Boolean   @default(false)
  insuranceVerifiedAt     DateTime?
  insuranceVerifiedBy     String?   // Admin user ID who verified
  
  // Insurance Tracking
  insuranceNotes          String?   @db.Text
  insuranceAddedAt        DateTime?
  insuranceUpdatedAt      DateTime?
  
  // LEGACY FIELD - Keep for backward compatibility
  insuranceCardUrl        String?

  // ============================================================================
  // END GUEST INSURANCE FIELDS
  // ============================================================================

  // 🆕 PASSWORD RESET FIELDS (for guest login)
  resetToken              String?   @unique
  resetTokenExpiry        DateTime?
  resetTokenUsed          Boolean   @default(false)
  lastPasswordReset       DateTime?
  passwordResetAttempts   Int       @default(0)
  passwordResetLastAttempt DateTime?

  // Preferences
  preferredLanguage  String  @default("en")
  preferredCurrency  String  @default("USD")
  emailNotifications Boolean @default(true)
  smsNotifications   Boolean @default(true)
  pushNotifications  Boolean @default(true)

  // Verification Flags
  emailVerified  Boolean @default(false)
  phoneVerified  Boolean @default(false)
  fullyVerified  Boolean @default(false)
  canInstantBook Boolean @default(false)

  // Stats
  tripCount     Int        @default(0)
  reviewCount   Int        @default(0)
  totalTrips    Int        @default(0)
  averageRating Float      @default(0)
  loyaltyPoints Int        @default(0)
  memberTier    MemberTier @default(BRONZE)

  // Profile completion tracking
  profileCompletion Int @default(0)

  // Verification Status
  isVerified Boolean @default(false)

  // ============================================================================
  // 🆕 SUSPENSION & BAN SYSTEM - GUEST MODERATION
  // ============================================================================

  // Suspension System
  suspensionLevel     SuspensionLevel?
  suspendedAt         DateTime?
  suspendedReason     String? // Public reason shown to guest
  suspendedBy         String? // Admin email/ID
  suspensionExpiresAt DateTime?
  autoReactivate      Boolean          @default(false)
  notifiedAt          DateTime?
  notificationSent    Boolean          @default(false)

  // Ban System (severe - complete block)
  bannedAt  DateTime?
  banReason String?
  bannedBy  String? // Admin email/ID

  // Warning System
  warningCount  Int       @default(0)
  lastWarningAt DateTime?

  // ============================================================================
  // 🆕 NEW FIELDS FOR WARNING CATEGORIZATION & FEATURE RESTRICTIONS
  // ============================================================================

  // Feature Restrictions (from warnings)
  canBookLuxury          Boolean @default(true)
  canBookPremium         Boolean @default(true)
  requiresManualApproval Boolean @default(false)

  // Active Warning Tracking (separate from total)
  activeWarningCount Int @default(0)

  // Relations
  reviews             RentalReview[]
  bookings            RentalBooking[]
  moderationHistory   GuestModeration[]    @relation("ProfileModeration")
  appeals             GuestAppeal[]        @relation("ProfileAppeals")
  profileStatus       GuestProfileStatus?
  appealNotifications AppealNotification[] @relation("GuestAppealNotifications")
  insuranceHistory    InsuranceHistory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([city, state])
  @@index([userId])
  @@index([documentsVerified])
  @@index([fullyVerified])
  @@index([canInstantBook])
  @@index([memberTier])
  @@index([suspensionLevel])
  @@index([suspendedAt])
  @@index([bannedAt])
  @@index([suspensionExpiresAt])
  @@index([userId, suspensionLevel])
  @@index([warningCount])
  @@index([activeWarningCount])
  @@index([canBookLuxury])
  @@index([canBookPremium])
  @@index([requiresManualApproval])
  @@index([insuranceVerified])
  @@index([expiryDate])
  @@index([resetToken])
}

// ============================================================================
// 🆕 NEW MODEL: INSURANCE HISTORY - COMPLETE AUDIT TRAIL
// ============================================================================

model InsuranceHistory {
  id                    String   @id @default(cuid())
  
  // 🔗 Relations
  reviewerProfileId     String
  reviewerProfile       ReviewerProfile @relation(fields: [reviewerProfileId], references: [id], onDelete: Cascade)
  
  // 📋 Action & Status
  action                String    // "ADDED", "UPDATED", "REMOVED", "VERIFIED", "EXPIRED"
  status                String    // "ACTIVE", "NOT_ACTIVE", "EXPIRED", "PENDING"
  
  // 🏢 Insurance Details (Snapshot at time of change)
  insuranceProvider     String?
  policyNumber          String?
  expiryDate            DateTime?
  hasRideshare          Boolean   @default(false)
  coverageType          String?
  customCoverage        String?
  insuranceCardFrontUrl String?
  insuranceCardBackUrl  String?
  insuranceNotes        String?   @db.Text
  
  // ✅ Verification Details
  verificationStatus    String    @default("UNVERIFIED") // "UNVERIFIED", "PENDING", "VERIFIED"
  verifiedBy            String?   // Admin user ID
  verifiedAt            DateTime?
  
  // 👤 Change Tracking
  changedBy             String    // User or Admin ID who made the change
  changedAt             DateTime  @default(now())
  
  // 📝 Additional Metadata
  changeReason          String?   @db.Text  // Why was this change made (optional)
  ipAddress             String?   // Track where change came from
  userAgent             String?   @db.Text  // Browser/device info
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  @@index([reviewerProfileId])
  @@index([reviewerProfileId, status])
  @@index([expiryDate])
  @@index([verificationStatus])
  @@map("insurance_history")
}

// ============================================================================
// 🆕 GUEST PROFILE STATUS MODEL - COMPREHENSIVE STATUS TRACKING
// ============================================================================

model GuestProfileStatus {
  id      String          @id @default(cuid())
  guestId String          @unique
  guest   ReviewerProfile @relation(fields: [guestId], references: [id], onDelete: Cascade)

  // Current status
  accountStatus      String   @default("ACTIVE")
  activeWarningCount Int      @default(0)
  activeSuspensions  Int      @default(0)
  activeRestrictions String[] @default([])

  // Complete history (JSON)
  statusHistory       Json @default("[]")
  restrictionHistory  Json @default("[]")
  notificationHistory Json @default("[]")

  // Last action tracking
  lastWarningAt      DateTime?
  lastSuspensionAt   DateTime?
  lastNotificationAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([guestId])
  @@index([accountStatus])
  @@index([activeWarningCount])
  @@index([activeSuspensions])
  @@index([lastWarningAt])
  @@index([lastSuspensionAt])
}

// ============================================================================
// 🆕 GUEST MODERATION MODEL - AUDIT TRAIL FOR ALL MODERATION ACTIONS
// ============================================================================

model GuestModeration {
  id           String          @id @default(cuid())
  guestId      String
  guestProfile ReviewerProfile @relation("ProfileModeration", fields: [guestId], references: [id], onDelete: Restrict)

  // Action details
  actionType      ModerationType
  suspensionLevel SuspensionLevel? // NULL for warnings/notes

  // ============================================================================
  // 🆕 NEW FIELD FOR WARNING CATEGORIZATION
  // ============================================================================
  warningCategory WarningCategory?

  // Reason tracking (dual visibility)
  publicReason      String // What guest sees
  internalNotes     String? @db.Text // Admin-only notes
  internalNotesOnly Boolean @default(false) // Hide publicReason from guest if true

  // Admin tracking
  takenBy String // Admin email/ID
  takenAt DateTime @default(now())

  // Expiry (for temporary suspensions and warnings)
  expiresAt DateTime?

  // ============================================================================
  // 🆕 NEW FIELD FOR FEATURE RESTRICTIONS
  // ============================================================================
  restrictionsApplied Json? // Array of restrictions: ["INSTANT_BOOK", "LUXURY_CARS", etc.]

  // Related entities (strings - no foreign keys for audit permanence)
  relatedBookingId String?
  relatedClaimId   String?

  // Relations
  appeals GuestAppeal[]

  @@index([guestId, takenAt])
  @@index([actionType])
  @@index([takenBy])
  @@index([expiresAt])
  @@index([warningCategory])
}

// ============================================================================
// 🆕 GUEST APPEAL MODEL - APPEAL SYSTEM FOR SUSPENDED/BANNED GUESTS
// ============================================================================

model GuestAppeal {
  id      String          @id @default(cuid())
  guestId String
  guest   ReviewerProfile @relation("ProfileAppeals", fields: [guestId], references: [id], onDelete: Restrict)

  moderationId String
  moderation   GuestModeration @relation(fields: [moderationId], references: [id], onDelete: Restrict)

  // Appeal content
  reason   String @db.Text
  evidence Json? // Photos, documents, supporting evidence

  // Appeal status
  status      AppealStatus @default(PENDING)
  reviewedBy  String? // Admin email/ID
  reviewedAt  DateTime?
  reviewNotes String?      @db.Text

  // Timestamps
  submittedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // ADD RELATION TO NOTIFICATIONS
  notifications AppealNotification[] @relation("AppealNotifications")

  @@index([guestId])
  @@index([status])
  @@index([moderationId])
}

// ============================================================================
// 🆕 APPEAL NOTIFICATION MODEL - TRACK APPEAL DECISION NOTIFICATIONS
// ============================================================================

model AppealNotification {
  id          String    @id @default(cuid())
  guestId     String
  appealId    String
  type        String // "APPROVED" or "DENIED"
  message     String?   @db.Text
  seen        Boolean   @default(false)
  dismissedAt DateTime?
  createdAt   DateTime  @default(now())

  // ADD RELATIONS
  guest  ReviewerProfile @relation("GuestAppealNotifications", fields: [guestId], references: [id], onDelete: Cascade)
  appeal GuestAppeal     @relation("AppealNotifications", fields: [appealId], references: [id], onDelete: Cascade)

  @@index([guestId, seen])
  @@index([appealId])
}

model RentalReview {
  id                String  @id @default(cuid())
  bookingId         String? @unique
  carId             String
  hostId            String
  renterId          String?
  reviewerProfileId String?

  // Review source tracking
  source ReviewSource @default(GUEST)

  // Ratings
  rating        Int
  cleanliness   Int?
  accuracy      Int?
  communication Int?
  convenience   Int?
  value         Int?

  // Review content
  title   String?
  comment String? @db.Text

  // Host Response Fields
  hostResponse    String?   @db.Text
  hostRespondedAt DateTime?

  // Support Response Fields
  supportResponse    String?   @db.Text
  supportRespondedAt DateTime?
  supportRespondedBy String?

  // Trip information
  tripStartDate DateTime?
  tripEndDate   DateTime?

  // Visibility and prominence
  isVisible  Boolean @default(true)
  isPinned   Boolean @default(false)
  isVerified Boolean @default(false)

  // Engagement metrics
  helpfulCount Int @default(0)
  viewCount    Int @default(0)

  // Relations
  booking         RentalBooking?   @relation(fields: [bookingId], references: [id])
  car             RentalCar        @relation(fields: [carId], references: [id])
  host            RentalHost       @relation(fields: [hostId], references: [id])
  reviewerProfile ReviewerProfile? @relation(fields: [reviewerProfileId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([carId])
  @@index([hostId])
  @@index([source])
  @@index([isVisible])
  @@index([isPinned])
  @@index([tripStartDate])
}

model ReviewTemplate {
  id       String @id @default(cuid())
  carType  String
  scenario String
  tone     String

  // Template content with placeholders
  titleTemplate   String
  commentTemplate String @db.Text

  // Metadata
  usageCount Int     @default(0)
  isActive   Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([carType])
  @@index([scenario])
  @@index([isActive])
}

// ============================================================================
// TRIP CHARGE & ADJUSTMENT MODELS
// ============================================================================

model TripCharge {
  id        String        @id @default(cuid())
  bookingId String
  booking   RentalBooking @relation(fields: [bookingId], references: [id])

  // Charge details
  mileageCharge  Decimal @db.Decimal(10, 2)
  fuelCharge     Decimal @db.Decimal(10, 2)
  lateCharge     Decimal @db.Decimal(10, 2)
  damageCharge   Decimal @db.Decimal(10, 2)
  cleaningCharge Decimal @db.Decimal(10, 2)
  otherCharges   Decimal @db.Decimal(10, 2)
  totalCharges   Decimal @db.Decimal(10, 2)

  // Charge breakdown details (JSON)
  chargeDetails String?

  // Status
  chargeStatus   ChargeStatus @default(PENDING)
  chargeAttempts Int          @default(0)
  lastAttemptAt  DateTime?
  nextRetryAt    DateTime?

  // Disputes
  disputes          String?
  disputeNotes      String?   @db.Text
  disputedAt        DateTime?
  disputeResolvedAt DateTime?
  disputeResolution String?

  // Payment tracking
  stripeChargeId String?
  chargedAt      DateTime?
  chargedAmount  Decimal?  @db.Decimal(10, 2)
  failureReason  String?
  failureCode    String?

  // Waive/Adjustment tracking - INCLUDING MISSING FIELD
  originalAmount     Decimal?  @db.Decimal(10, 2)
  adjustedAmount     Decimal?  @db.Decimal(10, 2)
  waivedAt           DateTime?
  waivedBy           String?
  waivedByAdminId    String?
  processedByAdminId String?
  waiveReason        String?
  waivePercentage    Int?
  adjustmentNotes    String?   @db.Text
  adjustmentRecord   Json?

  // Refund tracking
  refundAmount   Decimal?  @db.Decimal(10, 2)
  refundedAt     DateTime?
  refundReason   String?
  stripeRefundId String?

  // Admin review
  reviewedBy       String?
  reviewedAt       DateTime?
  adminNotes       String?   @db.Text
  requiresApproval Boolean   @default(false)
  approvedBy       String?
  approvedAt       DateTime?

  // Hold period tracking
  holdUntil       DateTime?
  guestNotifiedAt DateTime?
  reminderSentAt  DateTime?

  // Relations
  adjustments ChargeAdjustment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([bookingId])
  @@index([chargeStatus])
  @@index([holdUntil])
  @@index([requiresApproval])
}

model ChargeAdjustment {
  id        String  @id @default(cuid())
  bookingId String
  chargeId  String?

  // Adjustment details
  adjustmentType String
  reason         String

  // Amounts
  originalAmount   Decimal @db.Decimal(10, 2)
  adjustedAmount   Decimal @db.Decimal(10, 2)
  reductionAmount  Decimal @db.Decimal(10, 2)
  reductionPercent Int?

  // Detailed adjustments (JSON)
  adjustmentDetails String?

  // Admin action
  adminId    String
  adminEmail String
  adminNotes String? @db.Text

  // Processing
  processedAt      DateTime?
  stripeChargeId   String?
  stripeRefundId   String?
  processingStatus String    @default("pending")
  failureReason    String?

  // Relations
  booking    RentalBooking @relation(fields: [bookingId], references: [id])
  tripCharge TripCharge?   @relation(fields: [chargeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([bookingId])
  @@index([chargeId])
  @@index([adminId])
  @@index([processingStatus])
}

// ============================================================================
// INSPECTION & FRAUD MODELS
// ============================================================================

model InspectionPhoto {
  id         String   @id @default(cuid())
  bookingId  String
  type       String
  category   String
  url        String
  metadata   Json?
  uploadedAt DateTime @default(now())

  booking RentalBooking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([bookingId])
  @@index([type])
}

model BookingSession {
  id        String         @id @default(cuid())
  bookingId String?        @unique
  booking   RentalBooking? @relation(fields: [bookingId], references: [id])

  // Session tracking
  sessionId   String    @unique
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  duration    Int?
  abandoned   Boolean   @default(false)

  // Page flow tracking
  pageViews String?
  lastPage  String?

  // Interaction metrics
  clickCount  Int     @default(0)
  scrollDepth Float?
  timeOnPage  String?

  // Form behavior
  fieldTimings     String?
  fieldFocusCount  String?
  validationErrors Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sessionId])
  @@index([abandoned])
}

model FraudIndicator {
  id        String        @id @default(cuid())
  bookingId String
  booking   RentalBooking @relation(fields: [bookingId], references: [id])

  indicator  String
  severity   FraudSeverity
  confidence Float
  details    String?
  source     String

  createdAt DateTime @default(now())

  @@index([bookingId])
  @@index([severity])
  @@index([indicator])
}

// ============================================================================
// GUEST & MESSAGE MODELS
// ============================================================================

model GuestAccessToken {
  id        String    @id @default(cuid())
  token     String    @unique @default(cuid())
  bookingId String
  email     String
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  booking RentalBooking @relation(fields: [bookingId], references: [id])

  @@index([token])
  @@index([email])
}

model RentalMessage {
  id         String  @id @default(cuid())
  bookingId  String
  senderId   String
  senderType String
  message    String  @db.Text
  isRead     Boolean @default(false)

  // Enhanced messaging fields
  senderName     String?
  senderEmail    String?
  category       String    @default("general")
  hasAttachment  Boolean   @default(false)
  attachmentUrl  String?
  attachmentName String?
  isUrgent       Boolean   @default(false)
  readByAdmin    Boolean   @default(false)
  adminNotes     String?   @db.Text
  readAt         DateTime?
  metadata       Json?

  // Reply tracking
  replyToId String?

  booking RentalBooking @relation(fields: [bookingId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([bookingId])
  @@index([createdAt])
  @@index([isRead, readByAdmin])
  @@index([category])
  @@index([senderType])
}

// ============================================================================
// PAYOUT & FINANCIAL MODELS - UPDATED FOR PER-BOOKING PAYOUTS
// ============================================================================

model RentalPayout {
  id       String @id @default(cuid())
  hostId   String
  amount   Float
  currency String @default("USD")
  status   String

  // NEW FIELDS - Per-booking payout tracking
  bookingId  String?
  eligibleAt DateTime?

  // EXISTING FIELDS - Keep for backward compatibility
  startDate DateTime
  endDate   DateTime

  // Breakdown
  bookingCount  Int
  grossEarnings Float
  platformFee   Float
  processingFee Float
  netPayout     Float

  // Payment details
  paymentMethod    String?
  paymentDetails   String?
  transactionId    String?
  stripeTransferId String?
  processedAt      DateTime?

  // Relations
  host    RentalHost     @relation(fields: [hostId], references: [id])
  booking RentalBooking? @relation(fields: [bookingId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // UPDATED INDEXES - Optimized for cron job and host dashboard
  @@index([hostId])
  @@index([status])
  @@index([eligibleAt, status])
  @@index([hostId, status, processedAt])
}

model HostPayout {
  id               String       @id @default(cuid())
  hostId           String
  bookingId        String
  amount           Decimal      @db.Decimal(10, 2)
  status           PayoutStatus @default(PENDING)
  processedAt      DateTime?
  stripeTransferId String?
  createdAt        DateTime     @default(now())

  host    RentalHost    @relation(fields: [hostId], references: [id])
  booking RentalBooking @relation(fields: [bookingId], references: [id])

  @@index([hostId])
  @@index([status])
}

// ============================================================================
// HOST INQUIRY & ADMIN MODELS - ✅ UPDATED WITH REPLY TRACKING
// ============================================================================

model HostInquiry {
  id String @id @default(cuid())

  // Contact Information
  name  String
  email String
  phone String

  // Vehicle Information
  vehicleMake  String
  vehicleModel String
  vehicleYear  Int
  location     String @default("Phoenix")

  // Additional Details
  message   String? @db.Text
  mileage   Int?
  condition String  @default("EXCELLENT")
  features  String? @db.Text

  // Status Tracking
  status String @default("NEW")
  source String @default("WEBSITE")

  // Response Tracking
  contactedAt     DateTime?
  contactedBy     String?
  approvedAt      DateTime?
  approvedBy      String?
  rejectedAt      DateTime?
  rejectedBy      String?
  rejectionReason String?   @db.Text

  // Host Conversion
  convertedToHostId String?
  convertedAt       DateTime?

  // ✅ NEW: Store replies as JSON array
  replies    Json? @default("[]")
  replyCount Int   @default(0)

  // Metadata
  metadata Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([email])
  @@index([createdAt])
}

model AdminNotification {
  id String @id @default(cuid())

  // Notification Details
  type    String
  title   String
  message String @db.Text

  // Priority & Status
  priority String @default("MEDIUM")
  status   String @default("UNREAD")

  // Related Entity
  relatedId   String?
  relatedType String?

  // Action & Response
  actionRequired Boolean   @default(false)
  actionUrl      String?
  resolvedBy     String?
  resolvedAt     DateTime?
  resolution     String?   @db.Text

  // Metadata
  metadata Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type])
  @@index([status])
  @@index([priority])
  @@index([createdAt])
}

model ContactMessage {
  id      String        @id @default(cuid())
  name    String
  email   String
  phone   String?
  subject String
  message String        @db.Text
  status  MessageStatus @default(UNREAD)

  // Reply tracking
  repliedAt DateTime?
  repliedBy String?

  // ✅ NEW: Store replies as JSON array
  replies    Json? @default("[]")
  replyCount Int   @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([email])
}

model RentalDispute {
  id          String        @id @default(cuid())
  bookingId   String
  type        DisputeType
  description String        @db.Text
  status      DisputeStatus @default(OPEN)
  resolution  String?       @db.Text
  createdAt   DateTime      @default(now())
  resolvedAt  DateTime?

  // Fields for dispute review tracking
  reviewStartedAt DateTime?
  reviewedBy      String?

  booking RentalBooking @relation(fields: [bookingId], references: [id])

  @@index([bookingId])
  @@index([status])
}

model ActivityLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String
  entityType String
  entityId   String
  metadata   Json?
  ipAddress  String?
  createdAt  DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([entityType])
  @@index([createdAt])
}

model AmadeusCarCache {
  id         String   @id @default(cuid())
  location   String
  searchDate DateTime
  carData    String
  expiresAt  DateTime

  @@index([location, searchDate])
  @@index([expiresAt])
}

// ============================================================================
// CAREER/JOB MODELS
// ============================================================================

model JobPosting {
  id String @id @default(cuid())

  // Basic Information
  title      String
  department String
  location   String
  type       JobType

  // Detailed Description
  description      String  @db.Text
  requirements     String  @db.Text
  responsibilities String  @db.Text
  qualifications   String? @db.Text
  benefits         String? @db.Text

  // Compensation
  salaryMin    Int?
  salaryMax    Int?
  salaryPeriod String? @default("yearly")
  showSalary   Boolean @default(true)
  equity       String?

  // Experience Requirements
  experienceMin      Int?
  experienceMax      Int?
  experienceRequired String?

  // Status & Display
  isActive      Boolean @default(true)
  isFeatured    Boolean @default(false)
  isRemote      Boolean @default(false)
  openPositions Int     @default(1)

  // Application Settings
  applyUrl   String?
  applyEmail String?

  // Tracking & Analytics
  views            Int @default(0)
  applicationCount Int @default(0)

  // Dates
  postedDate  DateTime  @default(now())
  closingDate DateTime?
  filledDate  DateTime?

  // Relations
  applications JobApplication[]

  // Metadata
  keywords String?
  metadata Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isActive])
  @@index([department])
  @@index([location])
  @@index([type])
  @@index([postedDate])
}

model JobApplication {
  id String @id @default(cuid())

  // Job Reference
  jobId String
  job   JobPosting @relation(fields: [jobId], references: [id])

  // Applicant Information
  firstName String
  lastName  String
  email     String
  phone     String

  // Professional Links
  linkedin  String?
  github    String?
  portfolio String?
  website   String?

  // Documents
  resumeUrl         String
  coverLetter       String? @db.Text
  coverLetterUrl    String?
  additionalDocsUrl String?

  // Application Details
  yearsExperience Int?
  currentCompany  String?
  currentTitle    String?
  expectedSalary  Int?
  availableDate   DateTime?

  // Screening Questions (stored as JSON)
  screeningAnswers Json?

  // Status Tracking
  status ApplicationStatus @default(NEW)
  stage  String?
  rating Int?

  // Internal Notes & Review
  notes      String?   @db.Text
  reviewedBy String?
  reviewedAt DateTime?

  // Communication Tracking
  lastContactedAt DateTime?
  interviewDate   DateTime?
  offerDate       DateTime?
  offerAmount     Int?

  // Source Tracking
  source      String?
  referredBy  String?
  utmSource   String?
  utmMedium   String?
  utmCampaign String?

  // Rejection/Withdrawal
  rejectionReason String?
  withdrawnReason String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([jobId, email])
  @@index([jobId])
  @@index([status])
  @@index([email])
  @@index([createdAt])
}

model ApplicationActivity {
  id            String   @id @default(cuid())
  applicationId String
  action        String
  performedBy   String
  details       Json?
  createdAt     DateTime @default(now())

  @@index([applicationId])
  @@index([createdAt])
}

// ============================================================================
// REVENUE MODELS
// ============================================================================

model Revenue {
  id      String @id @default(cuid())
  hotelId String
  hotel   Hotel  @relation(fields: [hotelId], references: [id])

  // Period
  period    RevenuePeriod
  startDate DateTime
  endDate   DateTime

  // Ride revenue
  rideCount      Int
  rideGross      Float
  rideCommission Float
  platformFee    Float
  rideNet        Float

  // Booking revenue
  bookingCount    Int
  bookingValue    Float
  savedCommission Float

  // Totals
  totalRevenue Float
  currency     String @default("USD")

  // Payout
  status           RevenueStatus
  availableBalance Float
  pendingBalance   Float

  calculatedAt DateTime @default(now())

  @@unique([hotelId, period, startDate])
  @@index([hotelId])
  @@index([status])
}

model Transaction {
  id      String @id @default(cuid())
  hotelId String

  // Type
  type     TransactionType
  category String

  // Amount
  amount   Float
  currency String @default("USD")

  // References
  rideId    String?
  bookingId String?

  // Status
  status TransactionStatus

  description String
  metadata    String?

  createdAt   DateTime  @default(now())
  processedAt DateTime?

  @@index([hotelId])
  @@index([type])
  @@index([status])
}

// ============================================================================
// SECURITY & AUDIT MODELS
// ============================================================================

model AuditLog {
  id String @id @default(cuid())

  // Event categorization
  category  AuditCategory
  eventType String
  severity  AuditSeverity

  // Actor information
  userId     String?
  user       User?   @relation(fields: [userId], references: [id])
  adminId    String?
  adminEmail String?
  hotelId    String?

  // Request context
  ipAddress String
  userAgent String
  sessionId String?
  requestId String?

  // Action details
  action     String
  resource   String
  resourceId String?

  // Financial tracking (for charge-related events)
  amount   Decimal? @db.Decimal(10, 2)
  currency String?  @default("USD")
  stripeId String?

  // Detailed information
  details  Json?
  changes  Json?
  metadata Json?

  // Compliance flags
  gdpr Boolean @default(false)
  ccpa Boolean @default(false)
  pci  Boolean @default(false)
  sox  Boolean @default(false)

  // Data integrity
  hash         String
  previousHash String?
  verified     Boolean @default(false)

  // Backup/Archive status
  backedUp   Boolean   @default(false)
  archivedAt DateTime?

  timestamp DateTime @default(now())

  @@index([userId])
  @@index([adminId])
  @@index([adminEmail])
  @@index([hotelId])
  @@index([category])
  @@index([eventType])
  @@index([timestamp])
  @@index([resourceId])
  @@index([severity])
}

model SecurityEvent {
  id       String         @id @default(cuid())
  type     String
  severity ThreatSeverity

  // Source
  sourceIp  String
  userAgent String
  country   String?
  city      String?

  // Target
  targetResource String?
  targetId       String?

  // Details
  message    String
  details    String?
  stackTrace String?

  // Response
  action  String
  blocked Boolean @default(false)

  timestamp DateTime @default(now())

  @@index([type])
  @@index([severity])
  @@index([sourceIp])
  @@index([timestamp])
}

model Threat {
  id       String         @id @default(cuid())
  type     AttackType
  severity ThreatSeverity
  status   ThreatStatus

  // Source
  sourceIp   String
  sourceIps  String?
  country    String?
  asn        String?
  reputation Int?

  // Attack details
  method   String
  target   String
  payload  String?
  attempts Int

  // Detection
  detectionMethod String
  confidence      Float
  rules           String?

  // Mitigation
  automated    Boolean
  actions      String?
  blockedUntil DateTime?

  firstSeen DateTime
  lastSeen  DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type])
  @@index([severity])
  @@index([status])
  @@index([sourceIp])
}

model RateLimit {
  id         String @id @default(cuid())
  identifier String @unique

  // Limits
  tier     String
  requests Int
  window   Int

  // Current usage
  currentRequests Int      @default(0)
  windowStart     DateTime

  // Status
  exceeded    Boolean   @default(false)
  banned      Boolean   @default(false)
  bannedUntil DateTime?

  updatedAt DateTime @updatedAt

  @@index([identifier])
  @@index([exceeded])
}

model LoginAttempt {
  id         String  @id @default(cuid())
  identifier String
  userId     String?
  user       User?   @relation(fields: [userId], references: [id])

  ipAddress String
  userAgent String

  success Boolean
  reason  String?

  timestamp DateTime @default(now())

  @@index([identifier])
  @@index([ipAddress])
  @@index([success])
}

// ============================================================================
// ENUMS - INCLUDING NEW INSURANCE & CLAIMS ENUMS + GUEST ENUMS + MODERATION ENUMS + WARNING CATEGORY
// ============================================================================

enum UserRole {
  ANONYMOUS
  CLAIMED
  STARTER
  BUSINESS
  ENTERPRISE
  ADMIN
}

enum CertificationTier {
  NONE
  TU_3_C
  TU_2_B
  TU_1_A
}

enum PropertyType {
  HOTEL
  RESORT
  MOTEL
  BNB
  BOUTIQUE
  CHAIN
  INDEPENDENT
}

enum HotelSize {
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CHECKED_IN
  CHECKED_OUT
  CANCELLED
  NO_SHOW
}

enum BookingSource {
  DIRECT
  EXPEDIA
  BOOKING_COM
  AIRBNB
  AMADEUS
  SABRE
  WEBSITE
  PHONE
  WALK_IN
}

enum RideStatus {
  REQUESTED
  SEARCHING
  DRIVER_ASSIGNED
  DRIVER_ARRIVED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  GHOST
}

enum RentalBookingStatus {
  PENDING
  CONFIRMED
  ACTIVE
  COMPLETED
  CANCELLED
  NO_SHOW
  DISPUTE_REVIEW
}

enum BackgroundCheckStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  PASSED
  FAILED
  EXPIRED
  ERROR
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  READ
  RESPONDED
  FAILED
  EXPIRED
}

enum DocumentStatus {
  NOT_UPLOADED
  UPLOADED
  UNDER_REVIEW
  APPROVED
  REJECTED
  EXPIRED
  RESUBMISSION_REQUIRED
}

enum DocumentReviewStatus {
  PENDING
  REVIEWING
  APPROVED
  REJECTED
  NEEDS_CLARIFICATION
}

enum InsuranceProviderType {
  EMBEDDED
  TRADITIONAL
}

enum InsuranceTier {
  MINIMUM
  BASIC
  PREMIUM
  LUXURY
}

enum ClaimType {
  ACCIDENT
  THEFT
  VANDALISM
  CLEANING
  MECHANICAL
  WEATHER
  OTHER
}

enum ClaimStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  DENIED
  PAID
  DISPUTED
  RESOLVED
}

enum HostInsuranceStatus {
  ACTIVE
  INACTIVE
  EXPIRED
  DEACTIVATED
  SUSPENDED
  PENDING
}

enum PolicyStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  CLAIMED
}

enum RecoveryStatus {
  PENDING
  PARTIAL
  FULL
  FAILED
  WAIVED
}

enum RevenueStatus {
  PENDING
  AVAILABLE
  PROCESSING
  WITHDRAWN
  HELD
}

enum TransactionType {
  RIDE_COMMISSION
  BOOKING
  WITHDRAWAL
  FEE
  REFUND
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum ThreatSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ThreatStatus {
  DETECTED
  INVESTIGATING
  MITIGATED
  BLOCKED
  RESOLVED
  FALSE_POSITIVE
}

enum AuditCategory {
  AUTHENTICATION
  AUTHORIZATION
  DATA_ACCESS
  DATA_MODIFICATION
  CONFIGURATION
  SECURITY
  COMPLIANCE
  FINANCIAL
  CHARGE_MANAGEMENT
  HOST_MANAGEMENT
}

enum AuditSeverity {
  INFO
  WARNING
  ERROR
  CRITICAL
}

enum AttackType {
  BRUTE_FORCE
  DICTIONARY
  SQL_INJECTION
  XSS
  CSRF
  DDOS
  MAN_IN_MIDDLE
  SESSION_HIJACK
  CREDENTIAL_STUFFING
  BOT
}

enum MetricPeriod {
  DAY
  WEEK
  MONTH
  YEAR
}

enum RevenuePeriod {
  DAY
  WEEK
  MONTH
  TOTAL
}

enum MessageStatus {
  UNREAD
  READ
  REPLIED
  ARCHIVED
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum DisputeType {
  DAMAGE
  REFUND
  SERVICE
  MILEAGE
  FUEL
  LATE_RETURN
  CLEANING
  OTHER
}

enum DisputeStatus {
  OPEN
  UNDER_REVIEW
  INVESTIGATING
  RESOLVED
  CLOSED
}

enum CancelledBy {
  GUEST
  ADMIN
  HOST
  SYSTEM
}

enum FraudSeverity {
  INFO
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum VerificationStatus {
  PENDING
  SUBMITTED
  APPROVED
  REJECTED
  PENDING_CHARGES
  DISPUTE_REVIEW
  COMPLETED
}

enum ReviewSource {
  GUEST
  SEED
  MANAGED
  ADMIN
}

enum PaymentStatus {
  PENDING
  AUTHORIZED
  CAPTURED
  PAID
  FAILED
  REFUNDED
  PENDING_CHARGES
  CHARGES_PAID
  CHARGES_WAIVED
  PARTIAL_REFUND
  PARTIAL_PAID
  ADJUSTED_PAID
}

enum TripStatus {
  NOT_STARTED
  ACTIVE
  COMPLETED
  ENDED_PENDING_REVIEW
}

enum ChargeStatus {
  PENDING
  PROCESSING
  CHARGED
  FAILED
  WAIVED
  DISPUTED
  ADJUSTED
  REFUNDED
  PARTIALLY_WAIVED
  PARTIAL_CHARGED
  ADJUSTED_CHARGED
  FULLY_WAIVED
  ADJUSTED_PENDING
  ADJUSTMENT_FAILED
  UNDER_REVIEW
  EXPIRED
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  TEMPORARY
}

enum ApplicationStatus {
  NEW
  REVIEWING
  PHONE_SCREEN
  TECHNICAL_TEST
  INTERVIEW_SCHEDULED
  INTERVIEWED
  REFERENCE_CHECK
  OFFER_EXTENDED
  OFFER_ACCEPTED
  REJECTED
  WITHDRAWN
  HIRED
}

enum EarningsTier {
  BASIC
  STANDARD
  PREMIUM
}

enum InsuranceStatus {
  NONE
  PENDING
  ACTIVE
  INACTIVE
  DEACTIVATED
  EXPIRED
  SUSPENDED
}

// ============================================================================
// NEW ENUMS FOR ENHANCED GUEST PROFILE
// ============================================================================

enum GovernmentIdType {
  PASSPORT
  STATE_ID
  NATIONAL_ID
  DRIVERS_LICENSE
}

enum MemberTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
  DIAMOND
}

// ============================================================================
// 🆕 NEW ENUMS FOR GUEST SUSPENSION & MODERATION SYSTEM
// ============================================================================

enum SuspensionLevel {
  SOFT // Can view, can't book
  HARD // Limited access, must resolve issues
  BANNED // Complete block
}

enum ModerationType {
  WARNING
  SUSPEND
  UNSUSPEND
  BAN
  UNBAN
  RESTRICTION_ADDED
  RESTRICTION_REMOVED
  NOTE_ADDED
}

enum AppealStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  DENIED
  WITHDRAWN
}

// ============================================================================
// 🆕 NEW WARNING CATEGORY ENUM - FOR CATEGORIZING GUEST WARNINGS
// ============================================================================

enum WarningCategory {
  LATE_RETURNS
  VEHICLE_DAMAGE
  CLEANLINESS_ISSUES
  MILEAGE_VIOLATIONS
  POLICY_VIOLATIONS
  FRAUDULENT_ACTIVITY
  PAYMENT_ISSUES
  COMMUNICATION_ISSUES
  INAPPROPRIATE_BEHAVIOR
  UNAUTHORIZED_DRIVER
  SMOKING_VIOLATION
  PET_VIOLATION
  FUEL_VIOLATIONS
  DOCUMENTATION_ISSUES
  OTHER
}